C343/Summer 2016
Homework 07 Task A
Bryan Brussee
bbrussee

In our group is:
Myself
Jena Hanes (jrhanes@umail)
Daniel Nelson (dajanels@umail)
James Sowinski (japasowi@umail)

Textbook Exercise 9.10

def void transpose(E[] myarray, E searchValue) {
//whenever my arraylist is searched, I want to do this.
for (int i = 0; i < myarray.length(); i++) {
	if (myarray[i] == searchvalue) {
	swapvalue = myarray[i - 1];
	accessed = mylist[i];
	myarray[i-1] = accessed;
	myarray[i] = swapvalue; 
	return;
	}
	myarray.add(searchValue);
    }
}

Textbook Exercise 9.13

a) This is not a hash function, as it will not map every k to an n
within the hashtable - negative numbers will be assigned negative slots, 
which don't exist. So, h(k) does not map every k to a slot. 

b) This is a hash function, but seeing as it maps every k to the same slot,
it is an awful hash function. Lots of collisions.

c) This is a hash function. But it only works for insertion, and not searches.
It's impossible to figure out what random number was used for insertion,
so while you will be able to run the hash function in assigning keys
to slots, you won't be able to retrieve that data.

d) This also appears to be a hash function, but it depends on the size of n
relative to the size of k. Typically with hash functions, you want more values
in the key range than you have slots in the hash table. This function
provides exactly as many values in the key range as slots it has, so as long
as n is sufficiently large, this will be an excellent hash function.

Textbook Exercise 9.14

[_, _, 9, 3, 2, 12, _,]

^^^That's what the hash table should look like post-hash.

Here's the odds:

[1/7, 1/7, 9, 3, 2, 12, 5/7]
